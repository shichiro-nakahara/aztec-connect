{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Noir",
  "scopeName": "source.noir",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#storage_types"
    },
    {
      "include": "#numerics"
    },
    {
      "include": "#comments"
    },
    {
      "match": ";",
      "name": "punctuation.terminator.statement.noir"
    },
    {
      "begin": "(?x)\n(?!(?:for|in|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.noir"
        },
        "2": {
          "name": "punctuation.section.arguments.begin.bracket.round.noir"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.noir"
        }
      },
      "patterns": [
        {
          "include": "#storage_types"
        },
        {
          "include": "#numerics"
        },
        {
          "include": "#probably_a_parameter"
        }
      ]
    },
    {
      "name": "comment.block.noir",
      "begin": "(\\/\\*)",
      "end": "(\\*\\/)"
    },
    {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.noir"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.noir",
          "match": "\\b(for|in|return)\\b"
        }
      ]
    },
    "numerics": {
      "name": "constant.numeric.noir",
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*"
    },
    "strings": {
      "name": "string.quoted.double.noir",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.noir",
          "match": "\\\\."
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.noir"
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.noir"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.noir"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.noir"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.noir"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.noir"
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "match": "(?-mix:(?<!\\w)(?:uint(?:[2-9]|[1-2][0-9]|3[0-2])|bool)(?!\\w))",
          "name": "storage.type.built-in.primitive.noir"
        }
      ]
    },
    "probably_a_parameter": {
      "match": "(?<=(?:[a-zA-Z_0-9] |[&*>\\]\\)]))\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))",
      "captures": {
        "1": {
          "name": "variable.parameter.noir"
        }
      }
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.noir",
          "begin": "((?>\\s*)\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s)))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.noir"
            }
          },
          "end": "([!*]*\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.noir"
            }
          }
        },
        {
          "name": "comment.line.noir",
          "begin": "(\\/\\/)",
          "end": "(?=\\n)"
        }
      ]
    }
  }
}
