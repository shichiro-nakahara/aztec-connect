#include "compute_rollup_circuit_data.hpp"
#include "create_noop_join_split_proof.hpp"
#include "create_rollup.hpp"
#include "rollup_proof_data.hpp"
#include "verify_rollup.hpp"
#include <common/test.hpp>
#include <rollup/client_proofs/join_split/join_split.hpp>
#include <stdlib/merkle_tree/leveldb_tree.hpp>
#include <stdlib/merkle_tree/memory_store.hpp>
#include <stdlib/merkle_tree/memory_tree.hpp>

using namespace barretenberg;
using namespace rollup::rollup_proofs;
using namespace rollup::client_proofs::join_split;

class rollup_proofs_rollup_circuit : public ::testing::Test {
  protected:
    rollup_proofs_rollup_circuit()
        : data_tree(store, 32, 0)
        , null_tree(store, 128, 1)
        , root_tree(store, 128, 2)
        , user(rollup::tx::create_user_context())
    {
        update_root_tree_with_data_root();
    }

    static void SetUpTestCase()
    {
        old = std::cerr.rdbuf();
        std::cerr.rdbuf(swallow.rdbuf());
        inner_circuit_data = compute_join_split_circuit_data();
        padding_proof = create_noop_join_split_proof(inner_circuit_data);
    }

    static void TearDownTestCase() { std::cerr.rdbuf(old); }

    uint32_t append_note(uint32_t value)
    {
        tx_note note = { user.public_key, value, user.note_secret };
        auto enc_note = encrypt_note(note);
        uint32_t index = static_cast<uint32_t>(data_tree.size());
        auto leaf_data = create_leaf_data(enc_note);
        data_tree.update_element(index, leaf_data);
        return index;
    }

    void update_root_tree_with_data_root()
    {
        auto data_root = data_tree.root();
        auto rootBuf = data_root.to_buffer();
        auto index = from_buffer<uint128_t>(rootBuf, 16);
        auto non_empty_value = std::vector<uint8_t>(64, 0);
        non_empty_value[63] = 1;
        root_tree.update_element(index, non_empty_value);
    }

    std::vector<uint8_t> create_join_split_proof(std::array<uint32_t, 2> in_note_idx,
                                                 std::array<uint32_t, 2> in_note_value,
                                                 std::array<uint32_t, 2> out_note_value,
                                                 uint32_t public_input = 0,
                                                 uint32_t public_output = 0)
    {
        tx_note input_note1 = { user.public_key, in_note_value[0], user.note_secret };
        tx_note input_note2 = { user.public_key, in_note_value[1], user.note_secret };

        tx_note output_note1 = { user.public_key, out_note_value[0], user.note_secret };
        tx_note output_note2 = { user.public_key, out_note_value[1], user.note_secret };

        join_split_tx tx;
        tx.owner_pub_key = user.public_key;
        tx.public_input = public_input;
        tx.public_output = public_output;
        tx.num_input_notes = 2;
        tx.input_index = { in_note_idx[0], in_note_idx[1] };
        tx.merkle_root = data_tree.root();
        tx.input_path = { data_tree.get_hash_path(in_note_idx[0]), data_tree.get_hash_path(in_note_idx[1]) };
        tx.input_note = { input_note1, input_note2 };
        tx.output_note = { output_note1, output_note2 };
        tx.signature = sign_notes({ tx.input_note[0], tx.input_note[1], tx.output_note[0], tx.output_note[1] },
                                  { user.private_key, user.public_key });

        Composer composer =
            Composer(inner_circuit_data.proving_key, inner_circuit_data.verification_key, inner_circuit_data.num_gates);
        join_split_circuit(composer, tx);
        auto prover = composer.create_unrolled_prover();
        auto join_split_proof = prover.construct_proof();

        return join_split_proof.proof_data;
    }

    void add_proof_notes_to_data_tree(std::vector<uint8_t> const& proof)
    {
        auto encNote1 = std::vector(proof.data() + (2 * 32), proof.data() + (2 * 32 + 64));
        auto encNote2 = std::vector(proof.data() + (4 * 32), proof.data() + (2 * 32 + 64));
        data_tree.update_element(data_tree.size(), encNote1);
        data_tree.update_element(data_tree.size(), encNote2);
    }

    MemoryStore store;
    MerkleTree<MemoryStore> data_tree;
    MerkleTree<MemoryStore> null_tree;
    MerkleTree<MemoryStore> root_tree;
    rollup::tx::user_context user;
    static join_split_circuit_data inner_circuit_data;
    static std::vector<uint8_t> padding_proof;
    static std::streambuf* old;
    static std::stringstream swallow;

  private:
    std::vector<uint8_t> create_leaf_data(grumpkin::g1::affine_element const& enc_note)
    {
        std::vector<uint8_t> buf;
        write(buf, enc_note.x);
        write(buf, enc_note.y);
        return buf;
    }
};

join_split_circuit_data rollup_proofs_rollup_circuit::inner_circuit_data;
std::vector<uint8_t> rollup_proofs_rollup_circuit::padding_proof;
std::streambuf* rollup_proofs_rollup_circuit::old;
std::stringstream rollup_proofs_rollup_circuit::swallow;

TEST_F(rollup_proofs_rollup_circuit, test_1_proof_in_1_rollup)
{
    size_t rollup_size = 1;
    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });

    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_TRUE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_1_proof_in_1_rollup_twice)
{
    size_t rollup_size = 1;
    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });
    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_TRUE(verified);

    // Two notes were added to data tree in create_rollup. Add the new data root to root tree.
    update_root_tree_with_data_root();
    auto join_split_proof2 = create_join_split_proof({ 2, 3 }, { 70, 80 }, { 90, 60 });
    auto rollup2 = create_rollup({ join_split_proof2 }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    verified = verify_rollup_logic(rollup2, rollup_circuit_data);

    EXPECT_TRUE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_1_proof_with_old_root_in_1_rollup)
{
    size_t rollup_size = 1;
    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });
    append_note(30);
    append_note(40);
    update_root_tree_with_data_root();
    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    join_split_data data(join_split_proof);
    EXPECT_TRUE(data.merkle_root != rollup.old_data_root);

    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_TRUE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_1_proof_with_invalid_old_root_fails)
{
    size_t rollup_size = 1;
    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });
    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    rollup.old_null_root = fr::random_element();

    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_bad_rollup_root_fails)
{
    size_t rollup_size = 1;

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });

    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    rollup.rollup_root = fr::random_element();

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_incorrect_data_start_index_fails)
{
    size_t rollup_size = 1;

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });

    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    rollup.data_start_index = 0;

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_bad_join_split_proof_fails)
{
    size_t rollup_size = 1;

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 0 });

    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_reuse_spent_note_fails)
{
    size_t rollup_size = 1;

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });
    join_split_data join_split_data(join_split_proof);
    null_tree.update_element(join_split_data.nullifier1, { 64, 1 });

    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_incorrect_new_data_root_fails)
{
    size_t rollup_size = 1;

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });

    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    rollup.new_data_root = fr::random_element();

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

// Rollups of size 2.
TEST_F(rollup_proofs_rollup_circuit, test_1_proof_in_2_rollup)
{
    size_t rollup_size = 2;

    append_note(100);
    append_note(50);
    append_note(80);
    append_note(60);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });

    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_TRUE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_2_proofs_in_2_rollup)
{
    size_t rollup_size = 2;

    append_note(100);
    append_note(50);
    append_note(80);
    append_note(60);
    update_root_tree_with_data_root();
    auto join_split_proof1 = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });
    auto join_split_proof2 = create_join_split_proof({ 2, 3 }, { 80, 60 }, { 70, 70 });
    auto txs = std::vector{ join_split_proof1, join_split_proof2 };

    auto rollup = create_rollup(txs, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_TRUE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_insertion_of_subtree_at_non_empty_location_fails)
{
    size_t rollup_size = 2;

    append_note(100);
    append_note(50);
    update_root_tree_with_data_root();
    auto join_split_proof = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });

    auto rollup = create_rollup({ join_split_proof }, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_same_input_note_in_two_proofs_fails)
{
    size_t rollup_size = 2;

    append_note(100);
    append_note(50);
    append_note(80);
    append_note(60);
    update_root_tree_with_data_root();
    auto join_split_proof1 = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });
    auto join_split_proof2 = create_join_split_proof({ 2, 1 }, { 80, 50 }, { 70, 60 });
    auto txs = std::vector{ join_split_proof1, join_split_proof2 };

    auto rollup = create_rollup(txs, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

TEST_F(rollup_proofs_rollup_circuit, test_nullifier_hash_path_consistency)
{
    size_t rollup_size = 2;

    append_note(100);
    append_note(50);
    append_note(80);
    append_note(60);
    update_root_tree_with_data_root();
    auto join_split_proof1 = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 80 });
    auto join_split_proof2 = create_join_split_proof({ 2, 3 }, { 80, 60 }, { 70, 70 });
    auto txs = std::vector{ join_split_proof1, join_split_proof2 };

    auto rollup = create_rollup(txs, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    std::swap(rollup.new_null_roots[2], rollup.new_null_roots[3]);
    std::swap(rollup.new_null_paths[2], rollup.new_null_paths[3]);
    std::swap(rollup.old_null_paths[2], rollup.old_null_paths[3]);

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);
    auto verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_FALSE(verified);
}

HEAVY_TEST_F(rollup_proofs_rollup_circuit, test_2_proofs_in_2_rollup_full_proof)
{
    size_t rollup_size = 2;

    append_note(100);
    append_note(50);
    append_note(80);
    append_note(60);
    update_root_tree_with_data_root();
    auto join_split_proof1 = create_join_split_proof({ 0, 1 }, { 100, 50 }, { 70, 50 }, 30, 60);
    update_root_tree_with_data_root();
    auto join_split_proof2 = create_join_split_proof({ 2, 3 }, { 80, 60 }, { 70, 70 });
    update_root_tree_with_data_root();
    auto txs = std::vector{ join_split_proof1, join_split_proof2 };

    auto rollup = create_rollup(txs, data_tree, null_tree, root_tree, rollup_size, padding_proof);

    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, true);
    auto result = verify_rollup(rollup, rollup_circuit_data);

    EXPECT_TRUE(result.verified);

    auto rollup_data = rollup_proof_data(result.proof_data);
    EXPECT_EQ(rollup_data.data_start_index, 4UL);
    EXPECT_EQ(rollup_data.old_data_root, rollup.old_data_root);
    EXPECT_EQ(rollup_data.new_data_root, rollup.new_data_root);
    EXPECT_EQ(rollup_data.old_null_root, rollup.old_null_root);
    EXPECT_EQ(rollup_data.new_null_root, rollup.new_null_roots.back());
    EXPECT_EQ(rollup_data.old_root_root, rollup.old_root_root);
    EXPECT_EQ(rollup_data.num_txs, txs.size());
    EXPECT_EQ(rollup_data.inner_proofs.size(), txs.size());

    for (size_t i = 0; i < txs.size(); ++i) {
        auto tx_data = join_split_data(txs[i]);
        auto inner_data = rollup_data.inner_proofs[i];
        EXPECT_EQ(inner_data.public_input, tx_data.public_input);
        EXPECT_EQ(inner_data.public_output, tx_data.public_output);
        EXPECT_EQ(inner_data.new_note1, tx_data.new_note1);
        EXPECT_EQ(inner_data.new_note2, tx_data.new_note2);
        EXPECT_EQ(inner_data.nullifier1, tx_data.nullifier1);
        EXPECT_EQ(inner_data.nullifier2, tx_data.nullifier2);
    }
}

#ifdef __clang__
// Due to the differing evaluation orders between gcc and clang (the standard does not define the order), the two
// compiliers will currently produce differing circuits. It's thereforce necessary to verify a proof generated by
// one compiler using a verification key generated by that same compiler.
// Thus, currently, these hardcoded proofs will only pass with clang.
TEST_F(rollup_proofs_rollup_circuit, test_2_hardcoded_proofs_in_2_1_rollups)
{
    size_t rollup_size = 1;
    auto rollup_circuit_data = compute_rollup_circuit_data(rollup_size, inner_circuit_data, false);

    std::vector<uint8_t> proof1 = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xad, 0x89, 0x9b, 0xa7, 0xbf, 0xe2, 0x0c,
        0x1e, 0x51, 0x14, 0x72, 0x8f, 0xa9, 0x7e, 0xf4, 0xc4, 0x19, 0x80, 0x97, 0x2a, 0xb6, 0x01, 0xa1, 0x4e, 0xab,
        0x20, 0x73, 0x2a, 0xb5, 0x2d, 0x6b, 0x2b, 0xf5, 0x6b, 0x82, 0xb6, 0x32, 0xb8, 0x74, 0x2a, 0x7e, 0xe0, 0x55,
        0x03, 0x1b, 0x66, 0x9a, 0xda, 0x9e, 0x0b, 0x96, 0xd0, 0xf3, 0x1f, 0x84, 0x62, 0x47, 0x91, 0x15, 0x5f, 0xec,
        0x7b, 0xa0, 0x14, 0xa9, 0x0b, 0xa7, 0x08, 0x8a, 0x01, 0x20, 0xc3, 0xdd, 0x71, 0x17, 0xf0, 0x19, 0x5b, 0x1c,
        0x2e, 0x99, 0xf2, 0x68, 0xb3, 0x3c, 0x30, 0x3e, 0xd9, 0x74, 0xfb, 0x81, 0xfa, 0x3f, 0x22, 0xd6, 0x09, 0x43,
        0x45, 0xae, 0x5a, 0xcc, 0x8d, 0x66, 0x3c, 0x6d, 0x03, 0x22, 0xda, 0x04, 0x67, 0xd3, 0x8f, 0x9e, 0x1f, 0x1c,
        0x05, 0xe0, 0x32, 0xf4, 0xfa, 0xe6, 0x4a, 0x20, 0xd4, 0x28, 0xe8, 0xaa, 0x1d, 0xf6, 0xbd, 0xe5, 0x05, 0x16,
        0xdd, 0x12, 0x01, 0x08, 0x8f, 0xd8, 0xdd, 0xa8, 0x4c, 0x97, 0xed, 0xa5, 0x65, 0x24, 0x28, 0xd1, 0xc7, 0xe8,
        0x6a, 0xf5, 0x29, 0xcc, 0x5e, 0x0e, 0xb8, 0x21, 0x16, 0xce, 0x43, 0xed, 0x95, 0xfc, 0x3f, 0xa5, 0xc2, 0x39,
        0x8b, 0x9a, 0x4f, 0xd6, 0x0c, 0xae, 0xd7, 0x4b, 0x44, 0xd2, 0x5b, 0x5e, 0x09, 0xb6, 0xa2, 0x90, 0x28, 0x6a,
        0x16, 0x3d, 0xeb, 0xce, 0x14, 0xfe, 0xff, 0xd4, 0xf8, 0xfc, 0x04, 0x71, 0x49, 0xb0, 0xff, 0xa0, 0x7f, 0x17,
        0x10, 0x69, 0x6a, 0x08, 0x2b, 0xbc, 0x44, 0xaa, 0xff, 0xe9, 0xf0, 0xa0, 0xf3, 0xf7, 0x96, 0xc5, 0x0f, 0x63,
        0x0a, 0x0e, 0x7c, 0x11, 0x84, 0xa4, 0xff, 0xba, 0x87, 0xe9, 0x1a, 0x55, 0xd1, 0xac, 0x1b, 0x07, 0xa3, 0xe4,
        0x02, 0xf3, 0x9a, 0x86, 0x5e, 0xfa, 0xd6, 0x2b, 0x7d, 0xae, 0xc7, 0xd0, 0x10, 0x22, 0x22, 0x50, 0xca, 0x0e,
        0xe7, 0xaf, 0xb7, 0x6f, 0xbd, 0x8c, 0x8e, 0xf8, 0x72, 0x43, 0x52, 0x0f, 0xcb, 0xed, 0xd2, 0xee, 0x35, 0x34,
        0x9c, 0xa7, 0xd0, 0xae, 0x92, 0x03, 0xea, 0x9b, 0x7f, 0x61, 0x19, 0x0b, 0xaf, 0xcf, 0xce, 0x78, 0x94, 0xae,
        0xfb, 0x6a, 0x30, 0xa8, 0xc4, 0x8c, 0xc1, 0xb7, 0x74, 0x57, 0x70, 0x67, 0xa0, 0x52, 0x7a, 0xaa, 0xac, 0xb4,
        0x75, 0x32, 0x3b, 0xb8, 0x05, 0xbe, 0x24, 0x7f, 0xf5, 0x7d, 0x23, 0xaf, 0x09, 0x36, 0xbf, 0xb9, 0xbf, 0x92,
        0x87, 0xb3, 0xe2, 0x72, 0x70, 0x96, 0xfc, 0x3a, 0x41, 0x01, 0xfe, 0x80, 0x26, 0x3a, 0xaf, 0xba, 0x96, 0x42,
        0xf2, 0xcb, 0x0f, 0xd4, 0xe1, 0xa7, 0x24, 0x5a, 0x8d, 0xb0, 0xac, 0x71, 0xb1, 0x98, 0x30, 0xed, 0xab, 0x3f,
        0xfd, 0xb6, 0xff, 0xdc, 0x87, 0x56, 0xd9, 0x1a, 0x5a, 0xc6, 0xe1, 0x4b, 0xae, 0x70, 0x65, 0xc2, 0x1d, 0xe9,
        0x6f, 0x6f, 0x2e, 0x75, 0x07, 0x0e, 0x33, 0x6a, 0xf9, 0x5b, 0x87, 0xc9, 0x0a, 0xe1, 0x60, 0x4a, 0x42, 0xb3,
        0x30, 0xf0, 0x15, 0xee, 0xf9, 0x8a, 0x47, 0xd4, 0xbb, 0x18, 0x65, 0xcf, 0x1d, 0xbe, 0xa7, 0x92, 0xca, 0x33,
        0xff, 0x26, 0xa4, 0xd8, 0x05, 0xc2, 0x92, 0x9a, 0x94, 0xdc, 0x86, 0xde, 0xe5, 0x5b, 0x07, 0x39, 0x11, 0x40,
        0x45, 0x94, 0x5e, 0x0f, 0x57, 0x6c, 0x8f, 0xf7, 0x16, 0x33, 0x63, 0x74, 0x81, 0xae, 0x97, 0x1b, 0xb2, 0x0b,
        0x37, 0x86, 0xa1, 0xeb, 0xf5, 0xd9, 0x0d, 0x48, 0xdf, 0xc9, 0xd3, 0xc0, 0x7a, 0xb8, 0x4a, 0x63, 0x0e, 0xe0,
        0x2c, 0x9d, 0x7a, 0x49, 0x13, 0x04, 0x5e, 0xbd, 0x0b, 0x8c, 0xd6, 0xbd, 0xbd, 0x3f, 0xb5, 0x6f, 0x63, 0xe4,
        0x03, 0x55, 0x0e, 0x6a, 0xeb, 0x2f, 0x72, 0xdd, 0x81, 0x3a, 0xb4, 0x62, 0x1a, 0xc5, 0x20, 0xaf, 0x97, 0x41,
        0x22, 0x6f, 0x75, 0x2e, 0x47, 0x6a, 0x0d, 0xc3, 0x6e, 0xbb, 0x07, 0x48, 0x0b, 0x17, 0x0a, 0x66, 0xe1, 0x78,
        0x2c, 0x52, 0xf9, 0xc0, 0xcb, 0x61, 0xd9, 0xdd, 0xc2, 0x94, 0x4e, 0xfe, 0x53, 0x8c, 0x1c, 0xab, 0xaf, 0xc9,
        0x51, 0xd0, 0xf9, 0x36, 0x09, 0x5b, 0xda, 0x2e, 0x67, 0xfd, 0xb1, 0xe4, 0x44, 0x3a, 0x88, 0xaf, 0xd0, 0x5f,
        0x37, 0xc2, 0xaf, 0x48, 0xbd, 0x68, 0x95, 0x73, 0x01, 0x12, 0x0a, 0xa0, 0x97, 0x1c, 0xe2, 0xeb, 0xaf, 0xad,
        0x56, 0x6b, 0x01, 0x9a, 0xd0, 0x01, 0xae, 0xae, 0x35, 0x96, 0xf3, 0x6f, 0xf2, 0x64, 0x3c, 0xa7, 0xd5, 0x96,
        0x08, 0x4d, 0x2f, 0xd8, 0x5b, 0x42, 0x30, 0x57, 0x77, 0xd4, 0x73, 0xd5, 0xb7, 0x48, 0xe9, 0xdd, 0x5c, 0x7c,
        0xeb, 0x45, 0x28, 0x8d, 0x72, 0x71, 0x1d, 0xc6, 0xd1, 0x25, 0x06, 0x67, 0x59, 0x80, 0x5c, 0x1d, 0x20, 0x57,
        0x45, 0xc2, 0x09, 0xa5, 0x0f, 0x84, 0x3d, 0xd9, 0xd1, 0x4f, 0x9e, 0x53, 0x7b, 0x02, 0x29, 0x3b, 0xb3, 0xf5,
        0x03, 0xc1, 0x56, 0x06, 0xbf, 0xa4, 0x09, 0x66, 0x9e, 0xad, 0x8e, 0xad, 0x31, 0x7f, 0xf7, 0x91, 0x0b, 0x7e,
        0xba, 0xbd, 0x59, 0xca, 0xe4, 0x8e, 0x23, 0x87, 0x03, 0xc1, 0x2f, 0xb6, 0x48, 0x96, 0xb0, 0x96, 0x06, 0x06,
        0xba, 0xa1, 0x06, 0xe1, 0xe4, 0x2e, 0xe6, 0xa3, 0x0d, 0x4a, 0x50, 0x2e, 0x1d, 0xaf, 0x55, 0x38, 0xff, 0xdf,
        0x93, 0x0b, 0x7c, 0x27, 0xed, 0x63, 0x94, 0xed, 0x1a, 0xbb, 0x4f, 0xe5, 0x38, 0xe6, 0x34, 0xf8, 0x18, 0x4c,
        0x41, 0x1b, 0xe6, 0xef, 0xe9, 0xc5, 0x6f, 0x34, 0x16, 0x30, 0x7e, 0xb5, 0x40, 0xb4, 0xaf, 0x74, 0x82, 0xad,
        0x6c, 0x68, 0xa1, 0x73, 0x77, 0x5c, 0x11, 0x6d, 0x4b, 0x9e, 0x48, 0x91, 0x73, 0x49, 0xa3, 0x70, 0x4d, 0x66,
        0x96, 0xce, 0x89, 0x6f, 0x1f, 0x91, 0x0a, 0xff, 0x88, 0xae, 0x47, 0xf7, 0x14, 0xc8, 0x6c, 0x5a, 0x11, 0x28,
        0x22, 0x69, 0x05, 0x41, 0x6f, 0x81, 0x19, 0x10, 0x57, 0xf7, 0x36, 0x99, 0x23, 0x6a, 0xd5, 0xed, 0xe1, 0x72,
        0x2a, 0xe5, 0xf1, 0xd7, 0x4b, 0x93, 0x33, 0xa7, 0xe6, 0xb1, 0x82, 0x99, 0xa0, 0x2b, 0x55, 0x28, 0x54, 0xa2,
        0x49, 0xb9, 0xa8, 0xf3, 0xa7, 0xc8, 0x7a, 0xf6, 0xc8, 0x79, 0x91, 0x86, 0x83, 0x3a, 0x05, 0x05, 0xee, 0xfd,
        0xa9, 0xa9, 0x7f, 0xf3, 0x11, 0x52, 0xb2, 0x9a, 0x71, 0x68, 0x03, 0x05, 0xc5, 0xc8, 0x3d, 0xef, 0x1e, 0xe0,
        0x07, 0x76, 0x3a, 0x6b, 0x88, 0x73, 0x89, 0x8a, 0x6c, 0xbd, 0x00, 0x7f, 0x2b, 0x2b, 0xeb, 0xc7, 0xdf, 0x71,
        0xba, 0xbc, 0xb1, 0xac, 0x0c, 0xbe, 0x28, 0xc2, 0x33, 0xac, 0x2a, 0x0b, 0xd4, 0x49, 0x4a, 0x37, 0x44, 0x72,
        0x18, 0x87, 0xd5, 0x85, 0xe7, 0x95, 0x0c, 0x6f, 0x2b, 0x0d, 0x09, 0x5d, 0xec, 0xdd, 0xd1, 0x8d, 0xea, 0xb8,
        0x04, 0x2c, 0x3d, 0x3e, 0x63, 0xb9, 0x8b, 0x83, 0x12, 0x4a, 0x7f, 0x14, 0x9c, 0xe5, 0x23, 0x30, 0xd6, 0x71,
        0x0b, 0x67, 0x1f, 0x3f, 0xcd, 0xc9, 0x47, 0x24, 0x08, 0xda, 0x95, 0xe6, 0x9d, 0xcb, 0x0f, 0xfe, 0x01, 0x99,
        0xac, 0xb6, 0xd4, 0xa4, 0x7d, 0xdc, 0xb3, 0x41, 0xef, 0xf4, 0x5a, 0x8d, 0x9f, 0x35, 0xd0, 0x5a, 0x04, 0x95,
        0x00, 0xf4, 0x2d, 0x40, 0x0a, 0xfd, 0x7c, 0x1c, 0x11, 0x20, 0xcf, 0xd1, 0xad, 0x5b, 0x78, 0x08, 0x74, 0xa1,
        0xe2, 0x05, 0xc0, 0xa5, 0x39, 0x0e, 0x53, 0xd7, 0x10, 0x4c, 0x94, 0x31, 0x09, 0x1e, 0x74, 0xc1, 0x3f, 0x98,
        0xfd, 0x24, 0x21, 0x35, 0xa2, 0x2a, 0x08, 0x6f, 0x31, 0x34, 0x8d, 0xd5, 0x46, 0x99, 0xf3, 0x9f, 0xde, 0x48,
        0xaf, 0x3b, 0x13, 0xe9, 0x12, 0xa7, 0x81, 0x9f, 0x1f, 0x85, 0xe1, 0x32, 0xb7, 0x74, 0xac, 0x35, 0x5d, 0x0f,
        0xbd, 0x5c, 0xfc, 0x01, 0xc9, 0x1f, 0xce, 0x58, 0xe3, 0x9b, 0x68, 0x39, 0x82, 0x10, 0x79, 0x8b, 0x01, 0xbf,
        0xf4, 0x26, 0x17, 0x09, 0x27, 0xeb, 0x1e, 0x2f, 0xbc, 0xdc, 0x2d, 0x72, 0x75, 0x25, 0x2a, 0xfc, 0xad, 0xa3,
        0xf7, 0x7a, 0x70, 0xec, 0x1f, 0xbd, 0x31, 0x92, 0xbe, 0x2c, 0x1e, 0x55, 0x5b, 0x77, 0x56, 0xc7, 0x3a, 0x3b,
        0x19, 0x46, 0xa5, 0x81, 0x7d, 0x0f, 0x66, 0x17, 0x4c, 0x80, 0xed, 0x2d, 0x87, 0xb4, 0x0e, 0x33, 0xcb, 0x38,
        0x8d, 0x51, 0xd7, 0x94, 0xda, 0x8a, 0xc7, 0x45, 0x90, 0x86, 0x74, 0xe2, 0x20, 0x9e, 0x20, 0x8f, 0x16, 0x6e,
        0x60, 0xff, 0xcf, 0x9f, 0xff, 0x6a, 0xda, 0x5b, 0x17, 0x58, 0x6f, 0xfd, 0x9b, 0x7e, 0xee, 0x33, 0xf1, 0xa8,
        0x8f, 0x8a, 0x17, 0x4c, 0x13, 0x38, 0x4e, 0x6d, 0x9a, 0x3e, 0x01, 0x17, 0xc7, 0xbd, 0x7d, 0x1a, 0xb8, 0xe8,
        0x0c, 0xdf, 0x59, 0x99, 0x3f, 0xc9, 0x10, 0x99, 0x78, 0xb0, 0xd8, 0x4d, 0xbd, 0xc5, 0xb6, 0xc4, 0x8f, 0x3f,
        0x7f, 0xe0, 0xdc, 0xd4, 0x5c, 0x68, 0x14, 0xcc, 0x59, 0xbe, 0xea, 0xdf, 0xf3, 0xb5, 0xed, 0x43, 0x53, 0xc5,
        0xbc, 0xbd, 0x62, 0x62, 0xaa, 0xda, 0xf6, 0xb5, 0x49, 0x60, 0x63, 0x07, 0x88, 0x33, 0x96, 0x5b, 0xe3, 0x6a,
        0x4b, 0x45, 0x02, 0x80, 0x39, 0xa9, 0x91, 0x4e, 0x8f, 0xbd, 0x86, 0x6c, 0xe9, 0xb7, 0x24, 0x35, 0xe3, 0x2c,
        0x33, 0x04, 0x14, 0x71, 0xf0, 0x11, 0x0e, 0x10, 0x25, 0x71, 0x82, 0x42, 0xf4, 0x6c, 0xaa, 0x31, 0x2f, 0xeb,
        0x0b, 0x4f, 0x71, 0xb9, 0x1d, 0xb8, 0x39, 0x94, 0xf1, 0x3c, 0x98, 0xe5, 0x20, 0x98, 0xaa, 0x8c, 0x00, 0xd7,
        0x40, 0x44, 0x4f, 0x98, 0x01, 0x98, 0x64, 0xd6, 0xfc, 0xa4, 0x52, 0xdf, 0x21, 0x28, 0x3e, 0x06, 0xca, 0x5d,
        0xad, 0xc9, 0xa9, 0x39, 0xb4, 0xce, 0x09, 0xc9, 0xde, 0xea, 0x9f, 0xcb, 0x80, 0x92, 0xfb, 0xb7, 0x58, 0x6c,
        0x27, 0xc4, 0x61, 0x00, 0x18, 0x9b, 0xab, 0x82, 0x13, 0x0a, 0x4b, 0x5a, 0x12, 0x14, 0x15, 0x38, 0x54, 0x0b,
        0x63, 0xfe, 0x9e, 0x31, 0x72, 0xd3, 0x5f, 0x02, 0x9e, 0x15, 0x97, 0xa9, 0x82, 0x78, 0x00, 0xff, 0x4a, 0x88,
        0x2d, 0x6e, 0x69, 0x0c, 0x16, 0xd0, 0xd7, 0x34, 0xc2, 0x01, 0x3a, 0x7d, 0xe2, 0xaa, 0xe6, 0x07, 0x0e, 0x4a,
        0xcf, 0xac, 0x29, 0xe4, 0x64, 0x10, 0xfe, 0xca, 0x2b, 0x1c, 0x71, 0x60, 0xa5, 0x15, 0xbb, 0xe5, 0x6b, 0x5b,
        0x0e, 0x4a, 0xa5, 0x3d, 0xb9, 0xe3, 0xbd, 0x5a, 0xc8, 0x8d, 0x26, 0x61, 0xcf, 0xd0, 0xf1, 0xc3, 0x0e, 0x97,
        0x4b, 0x23, 0xb2, 0x35, 0x70, 0xa4, 0x2d, 0x6a, 0x64, 0x0b, 0x4d, 0x6f, 0xa7, 0x95, 0x2f, 0xdd, 0xdb, 0xd9,
        0x14, 0x57, 0xc0, 0xfe, 0xa9, 0x2b, 0xec, 0x9a, 0xb3, 0x24, 0x39, 0xc1, 0xf1, 0x6d, 0x4e, 0xa5, 0xf6, 0xb1,
        0xe0, 0xd6, 0x4c, 0x04, 0x94, 0xae, 0x3f, 0xd3, 0x73, 0x54, 0x1d, 0x92, 0x02, 0x49, 0xe7, 0x33, 0x58, 0x6e,
        0x82, 0xe9, 0xbd, 0x44, 0x25, 0xc3, 0x5f, 0x3a, 0x35, 0x4f, 0xc3, 0xc8, 0x8b, 0xfa, 0x3e, 0x63, 0x14, 0x2d,
        0xe4, 0x25, 0xd7, 0xc3, 0xac, 0x49, 0x2f, 0x95, 0xf8, 0x84, 0xe9, 0xfb, 0x6d, 0xab, 0xe7, 0x45, 0x71, 0x9c,
        0x2c, 0x30, 0x60, 0x1c, 0x37, 0xed, 0x06, 0xd4, 0x22, 0x0a, 0x3f, 0x20, 0xbd, 0x81, 0xb2, 0xa5, 0xec, 0x5d,
        0x2a, 0xb4, 0x0d, 0xcb, 0x8e, 0x42, 0x83, 0x1c, 0x5e, 0x9a, 0x0e, 0x38, 0xd2, 0xd6, 0x24, 0xb8, 0xfd, 0xe6,
        0x00, 0xcd, 0xb7, 0x25, 0x86, 0xc3, 0xc5, 0xe7, 0x6d, 0xa2, 0x99, 0x58, 0x19, 0x0b, 0x42, 0x8c, 0x18, 0x2d,
        0xf1, 0x48, 0x8f, 0x26, 0xc1, 0xeb, 0x7e, 0xff, 0x6f, 0xb4, 0x87, 0x3c, 0x93, 0xa3, 0x0c, 0xaf, 0xe6, 0x22,
        0xd3, 0xab, 0x3d, 0x30, 0x7e, 0x64, 0xa1, 0xe9, 0x14, 0xb7, 0x5c, 0xad, 0x07, 0xdf, 0x06, 0x79, 0x19, 0x13,
        0x1e, 0x6d, 0xeb, 0x39, 0xb0, 0x70, 0x3c, 0xd2, 0x32, 0xf7, 0x86, 0xbc, 0x21, 0xcd, 0x30, 0x64, 0x2f, 0x2e,
        0xcb, 0xe7, 0x3e, 0xbd, 0xdd, 0x93, 0x83, 0xd0, 0x05, 0xce, 0xa1, 0xad, 0x1c, 0x0b, 0x10, 0x41, 0xe3, 0x82,
        0x88, 0x6b, 0x65, 0x27, 0x26, 0x1e, 0x7f, 0x6e, 0xa0, 0x1d, 0x04, 0x79, 0xc5, 0x99, 0x77, 0xcc, 0x31, 0x8f,
        0x85, 0xcd, 0x12, 0x62, 0x04, 0x33, 0x30, 0x4d, 0x81, 0x1a, 0x8a, 0xd8, 0xf3, 0x14, 0x10, 0xda, 0x75, 0x6d,
        0xf0, 0x0f, 0x54, 0xde, 0x2e, 0x4c, 0x61, 0x2b, 0x7e, 0x8a, 0xa6, 0xfb, 0xb1, 0x3e, 0xc0, 0x5b, 0xda, 0x21,
        0x12, 0x0e, 0x42, 0x93, 0x85, 0xaa, 0x43, 0x11, 0xf4, 0xe6, 0xd5, 0x5b, 0xff, 0xf9, 0x03, 0x43, 0x7f, 0x6e,
        0xbd, 0x9b, 0x64, 0x17, 0x51, 0xf3, 0x24, 0xd0, 0x12, 0x1b, 0xd1, 0x93, 0x0c, 0xe9, 0x19, 0x91, 0xa4, 0x78,
        0xc5, 0xd4, 0xc4, 0x88, 0x90, 0x61, 0x43, 0xe3, 0x09, 0xd6, 0x6a, 0xc7, 0x1c, 0x0c, 0x1f, 0xc7, 0x2f, 0xd7,
        0x17, 0x48, 0x32, 0xad, 0x2a, 0x44, 0xf1, 0x28, 0x53, 0x7f
    };

    auto rollup = create_rollup({ proof1 }, data_tree, null_tree, root_tree, rollup_size, padding_proof);
    update_root_tree_with_data_root();
    bool verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_TRUE(verified);

    std::vector<uint8_t> proof2 = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x4d, 0x66, 0x13, 0x83, 0x9d, 0x24, 0x2c,
        0x60, 0xd0, 0xb4, 0x81, 0x57, 0xfe, 0x7b, 0x88, 0x96, 0x71, 0x77, 0x78, 0x4e, 0x24, 0x1e, 0xfa, 0xe4, 0x59,
        0x14, 0xde, 0x59, 0x23, 0xa9, 0xf2, 0x09, 0x72, 0xdd, 0x88, 0x8a, 0x00, 0x81, 0xaf, 0x4f, 0x7f, 0x91, 0xc6,
        0x9b, 0x26, 0x30, 0x9c, 0x6e, 0xfb, 0x59, 0xf5, 0x9c, 0xd3, 0x4f, 0x19, 0x74, 0xb7, 0xa9, 0xba, 0xdf, 0x50,
        0x33, 0x63, 0x00, 0x6f, 0x69, 0xe7, 0x08, 0xbe, 0xb0, 0x83, 0xba, 0x58, 0x39, 0x10, 0x24, 0x25, 0x26, 0xb7,
        0x63, 0xc2, 0xb7, 0x67, 0x95, 0x9e, 0x81, 0xbd, 0xd5, 0x42, 0xdb, 0xed, 0xf4, 0x82, 0x56, 0x6e, 0x25, 0xcf,
        0x93, 0x50, 0xa6, 0x3c, 0x2a, 0x6a, 0xa5, 0xa1, 0x4c, 0xe9, 0x53, 0x26, 0x14, 0x24, 0x27, 0xe5, 0xce, 0x9c,
        0x6c, 0x3a, 0x83, 0x6c, 0xb3, 0x98, 0x5b, 0x03, 0xc4, 0xa6, 0x02, 0x93, 0x1d, 0xf0, 0xd7, 0x16, 0x49, 0x1a,
        0xec, 0xb3, 0x3f, 0xfd, 0x51, 0x64, 0x8e, 0x68, 0xe2, 0x9a, 0x6c, 0x72, 0x71, 0xf8, 0xbc, 0x98, 0x94, 0x07,
        0x4c, 0xce, 0xf2, 0xe8, 0x66, 0x7f, 0xbe, 0x0d, 0x13, 0xf1, 0x5b, 0xc7, 0x10, 0x15, 0x1a, 0x9f, 0xd7, 0x69,
        0xd6, 0x0f, 0x8b, 0xd0, 0x38, 0x51, 0xd4, 0x2c, 0x40, 0x6f, 0x3e, 0x0f, 0x4a, 0x0e, 0x80, 0x1d, 0x89, 0xaf,
        0x0e, 0xc5, 0x5e, 0xe0, 0x0d, 0x12, 0xbf, 0xa5, 0x8f, 0xfd, 0x5b, 0x40, 0x0f, 0x82, 0xfb, 0x30, 0x98, 0xc0,
        0x75, 0x34, 0x75, 0xe2, 0x06, 0x30, 0x9c, 0xc1, 0x26, 0xb3, 0xa4, 0x37, 0xaa, 0x1c, 0x19, 0x40, 0x07, 0x75,
        0x1a, 0xde, 0x12, 0xfb, 0xa6, 0xe0, 0xfe, 0x8a, 0x13, 0x6d, 0xca, 0x1a, 0x5e, 0x83, 0x67, 0xe0, 0x07, 0xea,
        0x0a, 0xe7, 0x75, 0xed, 0x3b, 0x74, 0x24, 0x5a, 0x22, 0x1e, 0x58, 0x79, 0x6c, 0x90, 0x04, 0x86, 0x6c, 0x7a,
        0xa7, 0x5b, 0xde, 0x71, 0x12, 0xd7, 0x15, 0xa4, 0x16, 0xc8, 0x05, 0x4b, 0x4b, 0xb9, 0xb1, 0x12, 0x3c, 0x76,
        0xee, 0xfb, 0xff, 0x84, 0xc5, 0x6d, 0x8e, 0xd3, 0x1b, 0xfd, 0x0b, 0x5b, 0x15, 0xde, 0x16, 0x87, 0x71, 0xe8,
        0x92, 0x5d, 0xd9, 0xe6, 0xff, 0xcc, 0xe9, 0x30, 0xba, 0x10, 0xa3, 0x82, 0x95, 0xd2, 0x64, 0x02, 0x54, 0x63,
        0x8d, 0x32, 0xfd, 0xd5, 0x96, 0xbd, 0x23, 0x3f, 0x7a, 0xaf, 0x92, 0x7c, 0x06, 0x4e, 0x3e, 0x57, 0xbc, 0x73,
        0x68, 0x0c, 0x52, 0xd0, 0xc5, 0x47, 0x19, 0xa6, 0x12, 0x64, 0xb9, 0xa0, 0x2c, 0xda, 0xa8, 0xe6, 0x51, 0x8b,
        0xec, 0x24, 0x0b, 0xa5, 0x3f, 0x45, 0x52, 0xca, 0xa7, 0x3e, 0x82, 0x32, 0xdf, 0x05, 0x04, 0x57, 0xa3, 0x79,
        0xef, 0xe2, 0xe5, 0x58, 0xff, 0x4a, 0x5a, 0x89, 0x21, 0xf2, 0xd1, 0xf5, 0xe0, 0xbf, 0x3b, 0xb1, 0x20, 0xfc,
        0x67, 0xb4, 0x95, 0x9b, 0xb2, 0xbc, 0xbb, 0xc5, 0x7d, 0xb6, 0xf6, 0x2d, 0xf5, 0xff, 0xce, 0x1c, 0x63, 0xcd,
        0x79, 0xde, 0x09, 0x83, 0xa2, 0x45, 0x63, 0xa1, 0xd1, 0x4f, 0x20, 0x36, 0x10, 0xdb, 0xfa, 0x0d, 0x66, 0x26,
        0x5a, 0xb1, 0x35, 0x35, 0xbe, 0x6d, 0x90, 0x54, 0x7c, 0x4a, 0x42, 0x90, 0x43, 0xc4, 0x1b, 0x2c, 0x92, 0x7b,
        0x54, 0x37, 0x13, 0x74, 0xb0, 0x00, 0x9b, 0x84, 0x29, 0xec, 0x12, 0xfa, 0xd9, 0x22, 0xcf, 0x3c, 0x4d, 0xae,
        0xd1, 0x9e, 0x39, 0x23, 0xfb, 0x55, 0xc7, 0xaa, 0x8c, 0x75, 0xd6, 0x02, 0x05, 0x35, 0xe1, 0xe1, 0x7d, 0xe7,
        0x79, 0xa9, 0xe0, 0xdd, 0x24, 0x4d, 0xfc, 0x12, 0x80, 0x9b, 0x88, 0x45, 0xbd, 0x11, 0x39, 0x9e, 0x76, 0xd8,
        0x0d, 0xcf, 0x11, 0xa3, 0x88, 0xd1, 0x30, 0xe1, 0x32, 0x5b, 0x89, 0xb3, 0x44, 0xbd, 0xd5, 0x72, 0x20, 0xd4,
        0x0f, 0xc0, 0xbe, 0x5e, 0x47, 0x0f, 0x2e, 0x0f, 0x32, 0x25, 0x77, 0xc9, 0xdd, 0xfe, 0x2e, 0x75, 0x73, 0x5a,
        0xc7, 0x84, 0x19, 0x99, 0xad, 0x61, 0x3d, 0xe3, 0x6b, 0x76, 0x9d, 0x32, 0x1c, 0x25, 0x07, 0xd4, 0x87, 0x37,
        0x5f, 0x19, 0x7f, 0xc7, 0x86, 0x42, 0x62, 0x9d, 0xbe, 0x00, 0x13, 0x24, 0x6a, 0x84, 0xb2, 0x4d, 0x5e, 0xab,
        0xad, 0x7c, 0x59, 0x7a, 0x41, 0x6b, 0x02, 0x5c, 0x5f, 0x21, 0x05, 0xa6, 0xf8, 0x43, 0x42, 0xa3, 0xaf, 0x2c,
        0x2b, 0x2c, 0xd4, 0x90, 0xb9, 0x60, 0xd1, 0xd1, 0x03, 0x5f, 0x7f, 0x61, 0xa2, 0x6d, 0x11, 0x73, 0xac, 0x53,
        0x35, 0x05, 0xe7, 0x97, 0x8a, 0x54, 0x05, 0xf5, 0xfc, 0xea, 0xc8, 0x00, 0xb8, 0x32, 0xd6, 0xf0, 0xf2, 0x89,
        0xfe, 0x53, 0x11, 0x05, 0x78, 0x02, 0x9f, 0xd9, 0xb8, 0xcc, 0xae, 0xf5, 0x9a, 0x41, 0xf4, 0x04, 0x74, 0xdd,
        0x40, 0xe7, 0x0f, 0x5c, 0xb9, 0x0d, 0x2e, 0xe1, 0x2e, 0xbd, 0xea, 0x01, 0x5d, 0x99, 0x3e, 0x52, 0xa9, 0x69,
        0x5f, 0x62, 0x8a, 0x77, 0x91, 0xfd, 0x77, 0x7d, 0xf2, 0xb8, 0x64, 0x41, 0x26, 0x7a, 0x1b, 0x47, 0x05, 0xef,
        0x52, 0x90, 0x78, 0xb8, 0xb3, 0x9b, 0xad, 0x94, 0x09, 0x6c, 0xce, 0xb6, 0x66, 0x45, 0xf2, 0x00, 0x22, 0x98,
        0xa2, 0x3c, 0x08, 0x68, 0x8a, 0xd3, 0x82, 0x47, 0x79, 0x82, 0x0c, 0x39, 0x13, 0x2a, 0xdc, 0x00, 0xcd, 0xe7,
        0xd3, 0xb4, 0x2b, 0x49, 0xda, 0x20, 0xbd, 0x33, 0xb1, 0xce, 0x48, 0x53, 0x47, 0x99, 0x6c, 0x03, 0x66, 0xc7,
        0x4c, 0x5c, 0xe8, 0xe9, 0xa9, 0xa8, 0x63, 0xfa, 0x23, 0x69, 0x66, 0x4d, 0x35, 0x48, 0x44, 0xf3, 0x80, 0x70,
        0x1f, 0x16, 0x39, 0x30, 0x86, 0x28, 0x68, 0xa0, 0x75, 0x8d, 0x87, 0x0b, 0xb5, 0xdc, 0x73, 0x1a, 0xbe, 0x66,
        0x30, 0xcd, 0xea, 0x46, 0x1e, 0xe1, 0x8f, 0x76, 0xb4, 0x26, 0x8c, 0xaa, 0x8a, 0x1c, 0x1f, 0x74, 0xa5, 0xa2,
        0x74, 0x30, 0x24, 0x5e, 0x5c, 0xfd, 0x65, 0x3b, 0x05, 0xd0, 0xf2, 0x91, 0x40, 0x53, 0xc7, 0xcc, 0x44, 0x96,
        0x04, 0x01, 0x8f, 0x5d, 0xf7, 0x49, 0x69, 0xd0, 0x87, 0xd0, 0xa0, 0x21, 0xde, 0x99, 0x26, 0xf9, 0xd3, 0xdb,
        0xae, 0x8e, 0x7f, 0x3e, 0x3c, 0xdd, 0xae, 0xd8, 0x89, 0x8c, 0x64, 0xd4, 0x5d, 0x3f, 0x01, 0xe6, 0x79, 0xc1,
        0xcd, 0xbb, 0x83, 0x37, 0xb7, 0xb3, 0x27, 0xa4, 0xb7, 0xa9, 0x5a, 0x32, 0x62, 0xa7, 0xe7, 0xef, 0x2f, 0x2b,
        0x8b, 0xb6, 0xc7, 0x3a, 0xdf, 0x80, 0x7e, 0x73, 0xce, 0xc4, 0x05, 0x81, 0xa2, 0x31, 0x82, 0x3b, 0x89, 0x84,
        0x41, 0x0a, 0x30, 0x55, 0x5b, 0xe1, 0x2c, 0x0f, 0xa1, 0x22, 0xb9, 0xea, 0x63, 0xb8, 0x4e, 0x14, 0xc3, 0x56,
        0xd6, 0x58, 0x79, 0xc3, 0xa5, 0x15, 0x25, 0xf5, 0xa5, 0x59, 0x3b, 0xf1, 0xd9, 0xd6, 0x96, 0xc5, 0xc0, 0x66,
        0xe3, 0x61, 0x90, 0x66, 0x2c, 0x4e, 0x22, 0x71, 0x63, 0x8b, 0x2c, 0x59, 0xee, 0x22, 0xa4, 0x6e, 0xe1, 0x0c,
        0xcc, 0x42, 0x07, 0xfd, 0x34, 0x79, 0x35, 0xb7, 0xb6, 0x15, 0x49, 0x56, 0xda, 0x7d, 0x22, 0x73, 0x09, 0x51,
        0x0d, 0x6c, 0x9d, 0xba, 0x89, 0x7d, 0x78, 0x76, 0xfc, 0x3f, 0x11, 0xe9, 0x32, 0x43, 0xc9, 0x28, 0x0a, 0x58,
        0x7c, 0x7b, 0xce, 0x48, 0x55, 0x4c, 0xab, 0xb9, 0x4e, 0x28, 0x08, 0x28, 0xb8, 0x2a, 0x78, 0x2b, 0x5e, 0x58,
        0x27, 0x6a, 0xc1, 0xd2, 0x31, 0xa9, 0xca, 0xe2, 0xb7, 0xa8, 0x7a, 0xff, 0x14, 0xb3, 0xa5, 0x44, 0x2a, 0xde,
        0x54, 0x57, 0x17, 0x66, 0x97, 0xf0, 0x6d, 0x23, 0x41, 0xc0, 0x88, 0x3b, 0x01, 0x44, 0xb2, 0xac, 0xcc, 0x84,
        0x91, 0xf1, 0xbb, 0xee, 0x9b, 0xe8, 0xcb, 0x8a, 0x00, 0xaf, 0x7f, 0xab, 0x03, 0x7b, 0x00, 0x98, 0xf3, 0xf0,
        0x08, 0xef, 0xf0, 0x45, 0x27, 0xba, 0xa7, 0x15, 0x3a, 0x90, 0x6a, 0x7a, 0x1b, 0xfc, 0xb9, 0x2b, 0xe8, 0xb1,
        0xb8, 0xd3, 0x54, 0xd0, 0x15, 0xb2, 0x1c, 0xaf, 0x90, 0x89, 0xaf, 0x4a, 0xa0, 0xfe, 0x93, 0x05, 0xa0, 0x9b,
        0x9b, 0x26, 0x42, 0x6b, 0x83, 0xb7, 0xc9, 0x77, 0x45, 0x38, 0x3a, 0x8e, 0x07, 0x0c, 0x3b, 0x11, 0xe3, 0x67,
        0x1c, 0xce, 0xa7, 0xc3, 0xc4, 0xcb, 0x78, 0xcb, 0xa7, 0xec, 0x1b, 0x82, 0xe4, 0xe4, 0x33, 0xcd, 0x8b, 0xf8,
        0xd2, 0x3e, 0x7b, 0x28, 0xa9, 0x2c, 0x61, 0x9b, 0x71, 0x16, 0xbf, 0x6d, 0xbd, 0x55, 0x28, 0x1d, 0x54, 0x86,
        0x58, 0x92, 0x31, 0x77, 0xba, 0x0a, 0xf2, 0xac, 0xbe, 0xf6, 0x58, 0xbd, 0x01, 0x65, 0x3c, 0x36, 0x39, 0x38,
        0x85, 0xe6, 0x00, 0x35, 0x66, 0xe9, 0x58, 0xa6, 0x61, 0x18, 0x0c, 0xb6, 0x5a, 0x9a, 0xb3, 0x3b, 0xe8, 0x68,
        0x12, 0x2b, 0x13, 0xa5, 0xd1, 0x35, 0xb9, 0x84, 0x2a, 0x16, 0x00, 0x6e, 0x50, 0xf1, 0x58, 0x90, 0xf2, 0x12,
        0x00, 0x4c, 0x42, 0x5a, 0x7b, 0x02, 0x02, 0xe9, 0x3e, 0xa9, 0xd0, 0x7b, 0x4d, 0x5b, 0x5e, 0xc0, 0x9f, 0xb1,
        0x39, 0xc5, 0x4f, 0x47, 0x90, 0x45, 0x78, 0x4c, 0x3f, 0x2d, 0xeb, 0x91, 0x23, 0x65, 0x9d, 0xf0, 0x1c, 0xfd,
        0x71, 0x2c, 0x15, 0x48, 0x18, 0xfd, 0xea, 0x56, 0x52, 0x4d, 0xd9, 0x78, 0xb9, 0x1d, 0xde, 0x61, 0xe5, 0x2e,
        0x8b, 0xd0, 0x1e, 0xb9, 0x76, 0xa8, 0x72, 0x40, 0x27, 0x26, 0x2e, 0x93, 0x21, 0x9b, 0x19, 0x26, 0x00, 0x75,
        0xaa, 0x28, 0x00, 0x41, 0xc6, 0x26, 0xa8, 0x09, 0x87, 0xb4, 0x95, 0x1c, 0x9b, 0x9f, 0x50, 0x01, 0x9f, 0xa0,
        0x38, 0xc1, 0xe2, 0xdd, 0x6c, 0x42, 0xf8, 0x8d, 0x63, 0x29, 0xd5, 0x46, 0x2c, 0xdb, 0xd0, 0xda, 0x90, 0xd6,
        0xb6, 0xbd, 0xb6, 0x58, 0xf8, 0x41, 0xe0, 0xf1, 0xf2, 0xf0, 0x9e, 0xea, 0x89, 0x96, 0xc5, 0x92, 0xb5, 0xd4,
        0x39, 0x24, 0x5f, 0xa4, 0xd8, 0x97, 0x86, 0x1c, 0x1e, 0x13, 0x4b, 0xb0, 0x2f, 0x02, 0x06, 0xa5, 0xd5, 0xbb,
        0xb5, 0x96, 0x07, 0x04, 0x8c, 0x0e, 0x89, 0xd6, 0xda, 0x48, 0x7a, 0x9d, 0x9c, 0xcb, 0x4f, 0x95, 0x20, 0x4f,
        0x69, 0xb1, 0xdb, 0x26, 0x16, 0x6a, 0xf1, 0x3d, 0x5a, 0xdb, 0x59, 0x6f, 0x28, 0xed, 0x06, 0xc0, 0xf2, 0xc2,
        0x1e, 0xae, 0xd0, 0xa1, 0xd8, 0x01, 0x8f, 0x7e, 0x4e, 0x74, 0x76, 0xdb, 0xa6, 0xa1, 0x25, 0x67, 0x07, 0xbc,
        0x16, 0x1f, 0x52, 0x13, 0x30, 0x64, 0xe7, 0xdd, 0xaa, 0xc3, 0x27, 0x96, 0x9c, 0xf3, 0xe3, 0x10, 0x43, 0xca,
        0xde, 0xe8, 0xe5, 0xea, 0xc8, 0xff, 0x51, 0x3d, 0x88, 0x74, 0x69, 0xd6, 0xe0, 0x75, 0x05, 0x6d, 0xc6, 0x0c,
        0x1d, 0x01, 0x07, 0x1c, 0xd6, 0xcc, 0x35, 0xa4, 0xbc, 0x51, 0x1e, 0x15, 0xcd, 0xbf, 0x26, 0x21, 0x2a, 0x6e,
        0x01, 0x72, 0x55, 0xeb, 0xce, 0x5f, 0xf3, 0xa8, 0xa5, 0xf6, 0x04, 0x02, 0xa2, 0x6a, 0x87, 0xf0, 0xdc, 0xe8,
        0x6d, 0x3f, 0xe8, 0x39, 0xa5, 0x1f, 0x2d, 0xa1, 0x34, 0x45, 0xe6, 0x61, 0xf6, 0x41, 0xfe, 0x08, 0x94, 0xb6,
        0xf2, 0x29, 0xac, 0xae, 0xb3, 0xe0, 0x00, 0x36, 0x95, 0x3f, 0x29, 0x51, 0x3f, 0xfa, 0x7c, 0xa8, 0x23, 0x46,
        0x47, 0x14, 0x29, 0x87, 0xc1, 0x01, 0xa0, 0x0a, 0x6e, 0xf7, 0x35, 0xb1, 0xcd, 0xbe, 0x23, 0xca, 0x18, 0x6f,
        0x32, 0xe6, 0x0e, 0xc3, 0xb6, 0xd3, 0xed, 0x4c, 0xd7, 0xdc, 0xdb, 0x15, 0x87, 0xef, 0xa6, 0xf5, 0xf6, 0x68,
        0xf9, 0x18, 0xd1, 0xfb, 0xcd, 0x55, 0x3c, 0xbb, 0x96, 0x8d, 0x6c, 0x2b, 0x15, 0x9a, 0x00, 0x4e, 0x1c, 0xc5,
        0x9a, 0x54, 0x98, 0x85, 0xe6, 0x50, 0x88, 0x61, 0x96, 0xf1, 0x90, 0x08, 0xd6, 0x52, 0xfb, 0x0d, 0xda, 0xa5,
        0x3e, 0x7b, 0xcd, 0xd8, 0xe8, 0x39, 0x4c, 0xbc, 0x1b, 0xf2, 0x88, 0xb3, 0x04, 0xa4, 0xdd, 0xea, 0xcf, 0xbe,
        0x97, 0x35, 0x39, 0x2d, 0x93, 0x8e, 0xfb, 0x41, 0xfa, 0x79, 0xb8, 0x68, 0x53, 0xba, 0x56, 0x41, 0x20, 0x92,
        0x17, 0xa7, 0x26, 0x49, 0xdb, 0x2e, 0x1c, 0xff, 0x03, 0x37, 0xa3, 0xba, 0xe2, 0xfa, 0x8d, 0xcd, 0xdc, 0x57,
        0xef, 0xad, 0x09, 0x44, 0xfc, 0x93, 0x48, 0x29, 0x24, 0xd6, 0xe7, 0xf7, 0xd2, 0xd3, 0x6d, 0x89, 0x39, 0x16,
        0x1e, 0x03, 0xa7, 0x98, 0x1c, 0x3a, 0xb7, 0x9c, 0x2a, 0x95, 0xe5, 0x1f, 0x3c, 0xae, 0xf0, 0xab, 0xd4, 0x60,
        0x4d, 0x95, 0xca, 0xfc, 0xec, 0x2d, 0x7b, 0xb4, 0x1f, 0x02, 0xad, 0xe8, 0x29, 0xf7, 0x5a, 0xdb, 0x1d, 0xfa,
        0x01, 0xdb, 0x34, 0xb9, 0x3e, 0xa6, 0x54, 0x99, 0x8c, 0x91, 0x72, 0x11, 0x1b, 0xe7, 0xa5, 0xdb, 0x77, 0xa3,
        0x39, 0x26, 0x2e, 0x19, 0x5f, 0x21, 0x78, 0x3b, 0x05, 0x14, 0x9f, 0xd0, 0xa0, 0xd0, 0x24, 0xc6, 0xd4, 0xd4,
        0x98, 0xd9, 0x2a, 0x31, 0x4d, 0x58, 0x4c, 0x62, 0xc6, 0xfa, 0x42, 0xb4, 0xaf, 0x6b, 0xf9, 0x31, 0x84, 0x66,
        0x75, 0x52, 0xc9, 0xbe, 0x10, 0x2f, 0x53, 0xb0, 0x9d, 0xba
    };

    join_split_data data(proof2);
    EXPECT_EQ(data.merkle_root, data_tree.root());

    rollup = create_rollup({ proof2 }, data_tree, null_tree, root_tree, rollup_size, padding_proof);
    verified = verify_rollup_logic(rollup, rollup_circuit_data);

    EXPECT_TRUE(verified);
}
#endif
